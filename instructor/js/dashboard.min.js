/**
 * The bootstrap script used to config the whole application
 */

'use strict';

angular.module('everedu', ['ui.bootstrap', 'ui.router', 'ngCookies', 'chart.js',
    'everedu.MainCtrl', 'everedu.UserCtrl', 'everedu.CourseCtrl'
])
// from https://github.com/firebase/angularfire-seed/blob/master/app/app.js
.run(['$rootScope', 'Auth', '$state',
    function($rootScope, Auth, $state) {
        // track status of authentication
        Auth.$onAuth(function(user) {
            if (user) {
                $rootScope.uid = user.uid;
            }
        });

        // from https://www.firebase.com/docs/web/libraries/angular/guide/user-auth.html#section-routers
        $rootScope.$on("$stateChangeError", function(event, toState, toParams, fromState, fromParams, error) {
            if (error === "AUTH_REQUIRED") {
                swal("Please Login First");
                $state.go("login");
            }
        });
    }
])
    .config(['$stateProvider', '$urlRouterProvider',
        function($stateProvider, $urlRouterProvider) {

            // For unmatched routes
            $urlRouterProvider.otherwise('/login');

            // Application routes
            $stateProvider
                .state('login', {
                    url: '/login',
                    templateUrl: 'templates/login.html',
                    controller: 'LoginCtrl'
                })
                .state('dashboard', {
                    abstract: true,
                    url: '/dashboard',
                    templateUrl: 'templates/dashboard.html',
                    controller: 'MainCtrl',
                    resolve: {
                        // from Angularfire guideline 
                        // https://www.firebase.com/docs/web/libraries/angular/guide/user-auth.html#section-routers
                        "currentAuth": ["Auth",
                            function(Auth) {
                                return Auth.$requireAuth();
                            }
                        ]
                    }
                })
                .state('dashboard.user', {
                    abstract: true,
                    url: '/user',
                    views: {
                        'sidebar': {
                            templateUrl: 'templates/courseList.html',
                            controller: 'UserCtrl'
                        }
                    }
                })
                .state('dashboard.user.profile', {
                    url: '/profile',
                    views: {
                        'content@dashboard': {
                            templateUrl: 'templates/profile.html',
                            controller: 'ProfileCtrl'
                        }
                    }
                })
                .state('dashboard.course', {
                    abstract: true,
                    url: '/course/:courseID',
                    views: {
                        'sidebar': {
                            templateUrl: 'templates/courseMenu.html'
                        }
                    }
                })
                .state('dashboard.course.info', {
                    url: '/info',
                    views: {
                        'content@dashboard': {
                            templateUrl: 'templates/course/info.html',
                            controller: 'InfoCtrl'
                        }
                    }
                })
                .state('dashboard.course.attendance', {
                    url: '/attendance',
                    views: {
                        'content@dashboard': {
                            templateUrl: 'templates/course/attendance.html',
                            controller: 'AttendanceCtrl'
                        }
                    }
                })
                .state('dashboard.course.quiz', {
                    url: '/quiz',
                    views: {
                        'content@dashboard': {
                            templateUrl: 'templates/course/quiz.html',
                            controller: 'QuizCtrl'
                        }
                    }
                })
                .state('dashboard.course.presentation', {
                    url: '/presentation',
                    views: {
                        'content@dashboard': {
                            templateUrl: 'templates/course/presentation.html',
                            controller: 'PresentCtrl'
                        }
                    }
                })
        }
    ]);;
/**
 * everedu.CourseCtrl Module
 *
 * Description
 * Define InfoCtrl, and inject other course related controller
 */
angular.module('everedu.CourseCtrl', ['everedu.AttendanceCtrl', 'everedu.QuizCtrl',
    'everedu.CourseService', 'everedu.PresentCtrl'
])
// controller used to manage course informaton page
.controller('InfoCtrl', ['$scope', '$filter', 'CourseInfo',
    function($scope, $filter, CourseInfo) {
        $scope.editing = {
            announcement: false,
            description: false
        };

        $scope.schedule = {
            day: {
                M: false,
                T: false,
                W: false,
                R: false,
                F: false
            }
        };

        $scope.course = CourseInfo();

        /**
         * @name editAnnouncement
         * @desc Edit the course announcement
         */
        $scope.editAnnouncement = function() {
            if ($scope.editing.announcement) {
                $scope.course.announcement = $scope.copy.announcement;
                $scope.course.$save()
            } else {
                $scope.copy = angular.copy($scope.course);
            }

            $scope.editing.announcement = !$scope.editing.announcement;
        }

        /**
         * @name editDescription
         * @desc Edit the course description, and make sure
         * the data is properlly formatted
         */
        $scope.editDescription = function() {
            if ($scope.editing.description) {
                var day = "";
                angular.forEach($scope.schedule.day, function(value, key) {
                    if (value) {
                        day += key;
                    }
                })

                $scope.course.courseID = $scope.copy.courseID;
                $scope.course.fullName = $scope.copy.fullName;
                $scope.course.location = $scope.copy.location;
                $scope.course.day = day;
                if ($scope.schedule.startTime) {
                    $scope.course.startTime =
                        $filter('date')($scope.schedule.startTime, 'h:mm a');

                }
                if ($scope.schedule.endTime) {
                    $scope.course.endTime =
                        $filter('date')($scope.schedule.endTime, 'h:mm a');
                }
                $scope.course.$save();

            } else {
                angular.forEach($scope.course.day, function(value) {
                    $scope.schedule.day[value] = true;
                })
                $scope.copy = angular.copy($scope.course);
            }

            $scope.editing.description = !$scope.editing.description;
        }
    }
])
/**
 * everedu.MainCtrl module
 *
 * Description
 * Define LoginCtrl, SignupCtrl, MainCtrl
 */

angular.module('everedu.MainCtrl', ['firebase.auth', 'everedu.UserService'])
// Controller used for login
.controller('LoginCtrl', ['$scope', '$modal', '$state', 'Auth',

    function($scope, $modal, $state, Auth) {
        $scope.account = {};

        /**
         * @name login
         * @desc Login into the system with user's input
         */
        $scope.login = function() {
            Auth.$authWithPassword($scope.account)
                .then(function(user) {
                    $state.go('dashboard.user.profile');
                }).catch(function(error) {
                    sweetAlert(error.code||'Error', error.message, 'error');
                });
        }

        /**
         * @name openSignup
         * @desc Open the signup modal
         */
        $scope.openSignup = function() {
            var model = $modal.open({
                templateUrl: 'signupModal.html',
                controller: 'SignupCtrl',
            });

            model.result.then(function(account) {
                $scope.account = account;
            })

        }
    }
])
// Controller used for signup
.controller('SignupCtrl', ['$scope', '$modalInstance', 'Auth', 'Profile',
    function($scope, $modalInstance, Auth, Profile) {
        $scope.$modalInstance = $modalInstance;

        $scope.account = {};

        /**
         * @name signup
         * @desc Create a new account
         */
        $scope.signup = function() {
            Auth.$createUser($scope.account)
                .then(function(user) {
                    sweetAlert('Congratulations!',
                        'You have successfully created the account',
                        'success');

                    var profile = Profile(user.uid);
                    profile.name = "Not set";
                    profile.$save(); 

                    $modalInstance.close($scope.account);
                }).catch(function(error) {
                    sweetAlert(error.code||'Error', error.message, 'error');
                });
        }
    }
])
// Controller for the whole dashboard
.controller('MainCtrl', ['$scope', '$rootScope', '$state', 'Auth', 'Profile',
    function($scope, $rootScope, $state, Auth, Profile) {
        $rootScope.$state = $state;
        $scope.fullSidebar = true;
        $rootScope.profile = Profile($scope.uid);
        /**
         * @name toggleSidebar
         * @desc Toggle the side bar between full size or small size
         */
        $scope.toggleSidebar = function() {
            $scope.fullSidebar = !$scope.fullSidebar;
        };

        /**
         * @name logout
         * @desc Log the user out, and go to the login page
         */
        $scope.logout = function() {
            Auth.$unauth();
            $state.go('login');
        }


    }
])
/**
 *  everedu.UserCtrl Module
 *
 * Description
 * define controllers used to manage course list, and user profile
 */
angular.module('everedu.UserCtrl', ['everedu.UserService'])
// controller used to store course list info
.controller('UserCtrl', ['$scope', '$modal', 'CourseList',
    function($scope, $modal, CourseList) {
        $scope.courses = CourseList($scope.uid);

        /**
         * @name openCourseModal
         * @desc Open the modal used to create course, and push
         * the new course to the course list
         */
        $scope.openCourseModal = function() {
            var modal = $modal.open({
                templateUrl: 'CourseModal.html',
                controller: 'CreateCourseCtrl',
            });
            modal.result.then(function(course) {
                course.instructor = $scope.profile.name;
                $scope.courses.addCourse(course);
            });
        }
    }
])
// controller used to create course
.controller('CreateCourseCtrl', ['$scope', '$modalInstance', '$filter',
    function($scope, $modalInstance, $filter) {
        $scope.$modalInstance = $modalInstance;

        $scope.course = {};
        $scope.schedule = {
            day: {
                M: false,
                T: false,
                W: false,
                R: false,
                F: false
            }
        };

        /**
         * @name create
         * @desc Format new course data, and pass the data back
         * to parent controller
         */
        $scope.create = function() {
            var day = "";
            angular.forEach($scope.schedule.day, function(value, key) {
                if (value) {
                    day += key;
                }
            })

            $scope.course.day = day;

            if ($scope.schedule.startTime) {
                $scope.course.startTime =
                    $filter('date')($scope.schedule.startTime, 'h:mm a');

            }
            if ($scope.schedule.endTime) {
                $scope.course.endTime =
                    $filter('date')($scope.schedule.endTime, 'h:mm a');
            }

            $modalInstance.close($scope.course);
        }
    }
])
// controller used to manage user profile
.controller('ProfileCtrl', ['$scope', '$filter', 'Profile',
    function($scope, $filter, Profile) {
        $scope.editing = false;
        $scope.profile = Profile($scope.uid)

        /**
         * @name edit
         * @desc Edit the user profile
         */
        $scope.edit = function() {
            if ($scope.editing) {
                $scope.profile.name = $scope.copy.name;
                if ($scope.copy.officeHour) {
                    $scope.profile.officeHour =
                        $filter('date')($scope.copy.officeHour, 'h:mm a');
                }
                $scope.profile.$save();
            } else {
                $scope.copy = angular.copy($scope.profile);
            }

            $scope.editing = !$scope.editing;
        }
    }
])
/**
 * Loading Directive
 * @see http://tobiasahlin.com/spinkit/
 * code from https://github.com/rdash/rdash-angular
 */

angular
    .module('everedu')
    .directive('rdLoading', rdLoading);

function rdLoading() {
    var directive = {
        restrict: 'AE',
        template: '<div class="loading"><div class="double-bounce1"></div><div class="double-bounce2"></div></div>'
    };
    return directive;
};
/**
 * Widget Body Directive
 * code from https://github.com/rdash/rdash-angular
 */

angular
    .module('everedu')
    .directive('rdWidgetBody', rdWidgetBody);

function rdWidgetBody() {
    var directive = {
        requires: '^rdWidget',
        scope: {
            loading: '@?',
            classes: '@?'
        },
        transclude: true,
        template: '<div class="widget-body" ng-class="classes"><rd-loading ng-show="loading"></rd-loading><div ng-hide="loading" class="widget-content" ng-transclude></div></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Footer Directive
 * code from https://github.com/rdash/rdash-angular
 */

angular
    .module('everedu')
    .directive('rdWidgetFooter', rdWidgetFooter);

function rdWidgetFooter() {
    var directive = {
        requires: '^rdWidget',
        transclude: true,
        template: '<div class="widget-footer" ng-transclude></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Header Directive
 * code from https://github.com/rdash/rdash-angular
 */

angular
    .module('everedu')
    .directive('rdWidgetHeader', rdWidgetTitle);

function rdWidgetTitle() {
    var directive = {
        requires: '^rdWidget',
        scope: {
            title: '@',
            icon: '@'
        },
        transclude: true,
        template: '<div class="widget-header"><div class="row"><div class="pull-left"><i class="fa" ng-class="icon"></i> {{title}} </div><div class="pull-right" ng-transclude></div></div></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Directive
 * code from https://github.com/rdash/rdash-angular
 */

angular
    .module('everedu')
    .directive('rdWidget', rdWidget);

function rdWidget() {
    var directive = {
        transclude: true,
        template: '<div class="widget" ng-transclude></div>',
        restrict: 'EA'
    };
    return directive;

    function link(scope, element, attrs) {
        /* */
    }
};
/**
 * everedu.CourseService Module
 *
 * Description
 * Service used for course management
 */
angular.module('everedu.CourseService', ['firebase', 'firebase.utils'])
    .factory('CourseInfo', ['$firebaseObject', 'fbutil', '$stateParams',
        function($firebaseObject, fbutil, $stateParams) {
            // return the course object stored in Firebase
            return function() {
                var ref =
                    fbutil.ref(['courses', $stateParams.courseID, 'info']
                        .join('/'));
                return $firebaseObject(ref);
            };
        }
    ])
    .factory('Attendance', ['$firebaseObject', '$firebaseArray', 'fbutil', '$stateParams',
        function($firebaseObject, $firebaseArray, fbutil, $stateParams) {
            var absentee = null;
            var students = null;

            // add students in the course student list into the absentee list
            function initAbsenteeHelper() {
                var ref = absentee.$ref();
                angular.forEach(students, function(value, key) {
                    ref.child(value.$id).set({
                        name: value.$value,
                        date: new Date().toString()
                    });
                });
            }

            return {
                // return the control object stored in Firebase
                getControl: function(date) {
                    var ref =
                        fbutil.ref(['attendance', $stateParams.courseID, date, 'control']
                            .join('/'));
                    return $firebaseObject(ref);
                },
                // return the attendant list stored in Firebase
                getAttendant: function(date) {
                    var ref =
                        fbutil.ref(['attendance', $stateParams.courseID, date, 'attendant']
                            .join('/'));
                    return $firebaseArray(ref);
                },
                // return the absentee list stored in Firebase
                getAbsentee: function(date) {
                    var ref =
                        fbutil.ref(['attendance', $stateParams.courseID, date, 'absentee']
                            .join('/'));
                    absentee = $firebaseArray(ref);
                    return absentee;
                },
                // initlize the absentee list when the attendance control get initialized
                initAbsentee: function() {
                    if (students) {
                        initAbsenteeHelper();
                    } else {
                        var ref =
                            fbutil.ref(['courses', $stateParams.courseID, 'students']
                                .join('/'));
                        students = $firebaseArray(ref);
                        students.$loaded(initAbsenteeHelper);
                    }
                },
                // set students in absentee list missing class
                setAbsentee: function() {
                    angular.forEach(absentee, function(value, key) {
                        var date = new Date(value.date).toDateString();
                        var ref =
                            fbutil.ref(['student', value.$id, 'courseDetail', $stateParams.courseID,
                                'attendance', date
                            ].join('/'));
                        ref.set({
                            date: date,
                            status: 'miss'
                        });
                    });
                }
            };
        }
    ])
    .factory('Quiz', ['$firebaseObject', '$firebaseArray', '$firebaseUtils', 'fbutil', '$stateParams',
        function($firebaseObject, $firebaseArray, $firebaseUtils, fbutil, $stateParams) {
            return {
                // return the current quiz list stored in Firebase
                getCurrentQuiz: function() {
                    var ref =
                        fbutil.ref(['quiz', $stateParams.courseID, 'current']
                            .join('/'));
                    return $firebaseArray(ref);
                },
                // return the completed quiz list stored in Firebase
                getCompletedQuiz: function() {
                    var ref =
                        fbutil.ref(['quiz', $stateParams.courseID, 'completed']
                            .join('/'));
                    return $firebaseArray(ref);
                },
                // add the quiz into corresponding list
                addQuiz: function(quiz) {
                    var state = quiz.completed ? 'completed' : 'current';
                    var ref =
                        fbutil.ref(['quiz', $stateParams.courseID, state]
                            .join('/'));
                    ref.child(quiz.$id).set($firebaseUtils.toJSON(quiz));
                    return $firebaseObject(ref.child(quiz.$id));
                },
                // remove the quiz from its list
                removeQuiz: function(quiz) {
                    var state = quiz.completed ? 'completed' : 'current';
                    var ref =
                        fbutil.ref(['quiz', $stateParams.courseID, state]
                            .join('/'));
                    ref.child(quiz.$id).remove();
                }
            };
        }
    ])
    .factory('Presentation', ['$firebaseArray', 'fbutil', '$stateParams',
        function($firebaseArray, fbutil, $stateParams) {
            // return the course object stored in Firebase
            return {
                getRequests: function(request) {
                    var ref =
                        fbutil.ref(['presentation', $stateParams.courseID]
                            .join('/'));
                    return $firebaseArray(ref);
                }
            }
        }
    ])
    .factory('Chat', ['$firebaseArray', 'fbutil', '$stateParams',
        function($firebaseArray, fbutil, $stateParams) {
            // return the latest chat array stored in Firebase
            return function(limit) {
                var ref = fbutil.ref(['chat', $stateParams.courseID].join('/'));
                return $firebaseArray(ref.limitToLast(limit));
            };
        }
    ])
/**
 * everedu.UserService Module
 *
 * Description
 * Service used for user management
 */
angular.module('everedu.UserService', ['firebase', 'firebase.utils'])
    .factory('Profile', ['$firebaseObject', 'fbutil',
        function($firebaseObject, fbutil) {
            // return instructor profile object in Firebase
            return function(uid) {
                var ref = fbutil.ref(['instructor', uid, 'profile'].join('/'));
                return $firebaseObject(ref);
            };
        }
    ])
    .factory('CourseList', ['$firebaseArray', 'fbutil',
        function($firebaseArray, fbutil) {

            var CourseList = $firebaseArray.$extend({
                // create a new course
                addCourse: function(course) {
                    course.courseID = course.courseID.toUpperCase();
                    this.$add(course.courseID);

                    var ref =
                        fbutil.ref(['courses', course.courseID, 'info'].join('/'));
                    ref.set(course)
                }
            });

            // return a course list in Firebase
            return function(uid) {
                var ref = fbutil.ref(['instructor', uid, 'courses'].join('/'));
                return new CourseList(ref);
            };
        }
    ])
/**
 * everedu.AttendanceCtrl Module
 *
 * Description
 * define AttendanceCtrl
 */
angular.module('everedu.AttendanceCtrl', [])
// controller used to manage addentance page
.controller('AttendanceCtrl', ['$scope', 'Attendance',
    function($scope, Attendance) {
        $scope.cal = {
            show: false,
            date: new Date()
        };
        $scope.control = Attendance.getControl($scope.cal.date.toDateString());
        $scope.attendant = Attendance.getAttendant($scope.cal.date.toDateString());
        $scope.absentee = Attendance.getAbsentee($scope.cal.date.toDateString());

        $scope.chartLabels = ['Attendant', 'Absentee'];
        $scope.chartData = [0, 0];

        // update chart attendant value based on attendant length
        $scope.$watch("attendant.length", function(value) {
            $scope.chartData[0] = value;
        });

        // update chart absentee value based on absentee length
        $scope.$watch("absentee.length", function(value) {
            $scope.chartData[1] = value;
        });

        // update control, attendant, and absentee if another date gets selected
        $scope.$watch("cal.date", function(value) {
            $scope.control = Attendance.getControl(value.toDateString());
            $scope.attendant = Attendance.getAttendant(value.toDateString());
            $scope.absentee = Attendance.getAbsentee(value.toDateString());
        })

        /**
         * @name generateCode
         * @desc Generate validate code used for attendance
         */
        $scope.generateCode = function() {
            $scope.control.validateCode = parseInt(Math.random() * 100000);
            $scope.control.$save();
        }

        /**
         * @name toggleState
         * @desc toggle the option if accepting attendance record
         */
        $scope.toggleState = function() {
            // check if validateCode has been set
            if ($scope.control.validateCode == undefined) {
                sweetAlert('Warning', 'Please generate code first!', 'error');
                return;
            }

            // check if first time set active
            if ($scope.control.active == undefined) {
                $scope.control.active = false;
                Attendance.initAbsentee();
            }

            $scope.control.active = !$scope.control.active;
            $scope.control.$save();

            if (!$scope.control.active) {
                Attendance.setAbsentee();
            }
        }

        /**
         * @name toggleCal
         * @desc toggle the date picker
         */
        $scope.toggleCal = function($event) {
            $event.preventDefault();
            $event.stopPropagation();

            $scope.cal.show = true;
        }

    }
])
/**
 * everedu.PresentCtrl Module
 *
 * Description
 * define PresentCtrl
 */
angular.module('everedu.PresentCtrl', [])
// controller used to manage addentance page
.controller('PresentCtrl', ['$scope', 'Presentation', 'Chat',
    function($scope, Presentation, Chat) {
        $scope.requests = Presentation.getRequests();
        $scope.chat = Chat(10);
        $scope.message = {
            content: ''
        }

        /**
         * Check if there is someone is presenting
         */
        $scope.requests.$loaded(function(){
            angular.forEach($scope.requests, function(value) {
                if (value.state == 'p') {
                    $scope.presenting = true;
                }
            })
        })

        /**
         * Accept students' request and enable him to present
         */
        $scope.acceptRequest = function(request) {
            request.state = 'p';
            $scope.requests.$save(request);

            $scope.presenting = true;
        }

        /**
         * Delete a request from the requests list
         */
        $scope.deleteRequest = function(request) {
            $scope.requests.$remove(request);
        }

        /**
         * Send out a message and scoll to the bottom
         */
        $scope.sendMessage = function() {
            $scope.message.name = $scope.profile.name;
            $scope.chat.$add($scope.message);
            $scope.message.content = '';
        }

        startPresentation();
    }
])

var webrtc;
var presenting = false;

function startPresentation() {
    // code from https://github.com/HenrikJoreteg/SimpleWebRTC
    if (webrtc != null) {
        webrtc.joinRoom('everedu');
        return;
    }

    // create a webtrc object
    webrtc = new SimpleWebRTC({
        remoteVideosEl: 'remoteVideos',
        autoRequestMedia: true,
        url: 'everedu-webrtc.herokuapp.com'
    });
    // wait until webrtc is ready
    webrtc.on('readyToCall', function() {
        webrtc.joinRoom('everedu');
    });
}
/**
 * everedu.QuizCtrl Module
 *
 * Description
 * The controllers used to manage quiz state interface
 */
angular.module('everedu.QuizCtrl', [])
// controller used to control the most part of quiz page
.controller('QuizCtrl', ['$scope', '$modal', 'Quiz',
    function($scope, $modal, Quiz) {
        $scope.search = {};
        $scope.currentQuiz = Quiz.getCurrentQuiz();
        $scope.completedQuiz = Quiz.getCompletedQuiz();

        $scope.chartData = [];
        // check if a quiz question gets selected 
        $scope.$watch('selectedQuiz.question', function() {
            if ($scope.selectedQuiz == undefined) return;
            var charCode = 'A'.charCodeAt();
            $scope.chartLabels = [];
            $scope.chartData[0] = [];
            angular.forEach($scope.selectedQuiz.result, function(value, key) {
                $scope.chartLabels.push(String.fromCharCode(charCode + key));
                $scope.chartData[0].push(value);
            });

            watchResult();
        });

        /**
         * @name watchResult
         * @desc update the chart data if quiz result updates
         */
        function watchResult() {
            $scope.$watch('selectedQuiz.result', function(resultValue) {
                angular.forEach(resultValue, function(value, key){
                    $scope.chartData[0][key] = value;
                })
            })
        }

        /**
         * @name openQuizModal
         * @desc Open the modal used to create quiz, and push
         * the new quiz question to the current quiz list
         */
        $scope.openQuizModal = function() {
            var modal = $modal.open({
                templateUrl: 'QuizModal.html',
                controller: 'CreateQuizCtrl',
                size: 'lg'
            });

            modal.result.then(function(quiz) {
                $scope.currentQuiz.$add(quiz);
            });
        }

        /**
         * @name selectQuiz
         * @desc Select specific quiz question
         */
        $scope.selectQuiz = function(quiz) {
            $scope.selectedQuiz = quiz;
        }

        /**
         * @name toggleComplete
         * @desc Mark the quiz completed or uncomplted, and
         * put the quiz into matching quiz list
         */
        $scope.toggleComplete = function() {
            Quiz.removeQuiz($scope.selectedQuiz);
            $scope.selectedQuiz.completed = !$scope.selectedQuiz.completed;
            $scope.selectedQuiz = Quiz.addQuiz($scope.selectedQuiz);
        }

    }
])
// Controller used to create new quiz question
.controller('CreateQuizCtrl', ['$scope', '$modalInstance',
    function($scope, $modalInstance) {
        $scope.$modalInstance = $modalInstance;

        $scope.quiz = {
            choices: [],
            result: [],
            completed: false
        };

        /**
         * @name addChoice
         * @desc Add more choice into the quiz question
         */
        $scope.addChoice = function() {
            $scope.quiz.choices.push({
                content: ""
            });
            $scope.quiz.result.push(0);
        }

        /**
         * @name create
         * @desc Close the quiz modal and pass quiz object back to
         * parent
         */
        $scope.create = function() {
            $modalInstance.close($scope.quiz);
        }
    }
])
// the code is from https://github.com/firebase/angularfire-seed
angular.module('firebase.auth', ['firebase', 'firebase.utils'])
  .factory('Auth', ['$firebaseAuth', 'fbutil', function($firebaseAuth, fbutil) {
    return $firebaseAuth(fbutil.ref());
  }]);

// a simple wrapper on Firebase and AngularFire to simplify deps and keep things DRY
// The code is from https://github.com/firebase/angularfire-seed
angular.module('firebase.utils', ['firebase'])
    .constant('FBURL', 'https://everedu.firebaseio.com/')
    .factory('fbutil', ['$window', 'FBURL', '$q',
        function($window, FBURL, $q) {
            "use strict";

            var utils = {
                // convert a node or Firebase style callback to a future
                handler: function(fn, context) {
                    return utils.defer(function(def) {
                        fn.call(context, function(err, result) {
                            if (err !== null) {
                                def.reject(err);
                            } else {
                                def.resolve(result);
                            }
                        });
                    });
                },

                // abstract the process of creating a future/promise
                defer: function(fn, context) {
                    var def = $q.defer();
                    fn.call(context, def);
                    return def.promise;
                },

                ref: firebaseRef
            };

            return utils;

            function pathRef(args) {
                for (var i = 0; i < args.length; i++) {
                    if (angular.isArray(args[i])) {
                        args[i] = pathRef(args[i]);
                    } else if (typeof args[i] !== 'string') {
                        throw new Error('Argument ' + i + ' to firebaseRef is not a string: ' + args[i]);
                    }
                }
                return args.join('/');
            }

            /**
             * Example:
             * <code>
             *    function(firebaseRef) {
             *       var ref = firebaseRef('path/to/data');
             *    }
             * </code>
             *
             * @function
             * @name firebaseRef
             * @param {String|Array...} path relative path to the root folder in Firebase instance
             * @return a Firebase instance
             */
            function firebaseRef(path) {
                var ref = new $window.Firebase(FBURL);
                var args = Array.prototype.slice.call(arguments);
                if (args.length) {
                    ref = ref.child(pathRef(args));
                }
                return ref;
            }
        }
    ]);